{"version":3,"sources":["utils/auth.js","utils/mutations.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","LoginUSER","gql","AddUSER","SaveBOOK","RemoveBOOK","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","QueryMe","SavedBooks","useQuery","loading","userData","me","removeBook","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","addUser","validated","showAlert","setShowAlert","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d0e7593.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const LoginUSER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const AddUSER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SaveBOOK = gql`\r\n  mutation saveBook($book: BookItem!) {\r\n    saveBook(book: $book) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        description\r\n        bookId\r\n        authors\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const RemoveBOOK = gql`\r\n  mutation removeBook($bookId: ID!) {\r\n    removeBook(bookId: $bookId) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        description\r\n        bookId\r\n        authors\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport Auth from \"../utils/auth\";\r\nimport { SaveBOOK } from \"../utils/mutations\";\r\nimport { searchGoogleBooks } from \"../utils/API\";\r\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  const [saveBook] = useMutation(SaveBOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || [\"No author to display\"],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const { data } = await saveBook({\r\n        variables: { book: { ...bookToSave } },\r\n      });\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : \"Search for a book to begin\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}\r\n                    >\r\n                      {savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )\r\n                        ? \"This book has already been saved!\"\r\n                        : \"Save this Book!\"}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","export const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const QueryMe = gql`\r\n  query me {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  CardColumns,\r\n  Card,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { QueryMe } from \"../utils/queries\";\r\nimport { RemoveBOOK } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\nimport { removeBookId } from \"../utils/localStorage\";\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data } = useQuery(QueryMe);\r\n  const userData = data?.me || [];\r\n  const [removeBook] = useMutation(RemoveBOOK);\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const { data } = await removeBook({\r\n        variables: { bookId },\r\n      });\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${\r\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\r\n              }:`\r\n            : \"You have no saved books!\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button\r\n                    className=\"btn-block btn-danger\"\r\n                    onClick={() => handleDeleteBook(book.bookId)}\r\n                  >\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { AddUSER } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [addUser] = useMutation(AddUSER);\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.addUser.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your username\"\r\n            name=\"username\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Username is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            placeholder=\"Your email address\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={\r\n            !(\r\n              userFormData.username &&\r\n              userFormData.email &&\r\n              userFormData.password\r\n            )\r\n          }\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { LoginUSER } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [login] = useMutation(LoginUSER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your email\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport SearchBooks from \"./pages/SearchBooks\";\r\nimport SavedBooks from \"./pages/SavedBooks\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport {\r\n  ApolloClient,\r\n  ApolloProvider,\r\n  InMemoryCache,\r\n  createHttpLink,\r\n} from \"@apollo/client\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"/graphql\",\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem(\"id_token\");\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <>\r\n          <Navbar />\r\n          <Routes>\r\n            <Route path=\"/\" element={<SearchBooks />} />\r\n            <Route path=\"/saved\" element={<SavedBooks />} />\r\n            <Route\r\n              path=\"*\"\r\n              element={<h1 className=\"display-2\">Wrong page!</h1>}\r\n            />\r\n          </Routes>\r\n        </>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}